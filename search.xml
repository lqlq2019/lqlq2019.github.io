<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【设计模式】单例模式</title>
      <link href="/2020/07/07/designpattern/singleton/"/>
      <url>/2020/07/07/designpattern/singleton/</url>
      
        <content type="html"><![CDATA[<h3 id="单例模式概述"><a href="#单例模式概述" class="headerlink" title="单例模式概述"></a>单例模式概述</h3><ul><li>定义：保证一个类仅有一个实例，并提供一个全局访问点</li><li>类型：创建型设计模式</li><li>适用场景：线程池、数据库连接池、应用配置、计数器(单服务情况)</li><li>优点：<ol><li>在内存中只有一个实例，减少内存开销</li><li>可以避免对资源的多重占用</li><li>设置全局访问点，严格控制访问</li></ol></li><li>缺点：没有接口，扩展困难</li></ul><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【通用】软件的设计原则</title>
      <link href="/2020/07/07/common/designprinciple/"/>
      <url>/2020/07/07/common/designprinciple/</url>
      
        <content type="html"><![CDATA[<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><ul><li>定义：一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong></li><li>优点：提高软件系统的可复用性和可维护性</li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul><li>定义：不要存在多于一个导致类变更的原因</li><li>一个类/接口/方法只负责一项职责</li><li>优点：降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险</li></ul><a id="more"></a><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><ul><li>定义：高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖于细节，细节应该依赖于抽象。</li><li>针对接口编程，不要针对实现编程</li><li>优点：减少类间的耦合性，提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险</li></ul><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><ul><li>定义：用多个专门的接口，不使用单一的总接口，客户端不应该依赖不需要的接口</li><li>一个类对一个类的依赖应该建立在最小的接口上</li><li>建立单一接口，尽量细化接口，接口中方法尽量少（适度）</li><li>优点：符合高内聚低耦合的设计思想，使类具有很好的可读性、可扩展性和可维护性</li></ul><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><ul><li>定义：又称最少知道原则，一个对象应该对其它对象保持最少的了解</li><li>尽量降低类与类之间的耦合</li><li>优点：降低类之间的耦合</li></ul><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><ul><li><p>定义：子类对象能够替换所有父类对象</p></li><li><p>子类能够当成父类来使用，子类应该拥有比父类更多的功能</p></li></ul><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><ul><li>尽量使用对象组合，而不是通过继承来达到复用的目的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】Redis知识总结</title>
      <link href="/2020/07/06/redis/redis-summary/"/>
      <url>/2020/07/06/redis/redis-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis的概述"><a href="#Redis的概述" class="headerlink" title="Redis的概述"></a>Redis的概述</h3><p>Redis是速度非常快的非关系型（NoSQL）内存key-value存储数据库。键的类型只能为字符串，值支持字符串、列表、集合、有序集合、散列表等多种数据类型。</p><p>Redis支持数据磁盘持久化存储，支持主从，支持分片。</p><ul><li>Redis为什么这么快（拥有10万+QPS）<ol><li>Redis由C语言编写，完全基于内存，请求基本都是纯粹的内存操作，执行效率高</li><li>数据结构和数据操作简单</li><li>采用单线程，单线程也能处理高并发请求</li><li>使用多路I/O复用模型，非阻塞IO</li></ol></li></ul><a id="more"></a><h3 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h3><ul><li><p>String：值最大能存储512MB，二进制安全</p></li><li><p>Hash：String元素组成的字典，适合存储对象</p></li><li><p>List：字符串列表，按String元素插入顺序排序</p></li><li><p>Set：String元素组成的无序集合，不允许重复，通过哈希表实现</p></li><li><p>Zset：有序集合，通过分数(score)对集合成员从小到大排序</p></li><li><p>其它：用于计数的HyperLogLog，用于支持存储地理位置信息的Geo等</p><blockquote><p>Redis底层数据类型：1.简单动态字符串 2.链表 3.字典 4.跳跃表 5.整数集合 6.压缩集合 7.对象</p></blockquote></li></ul><hr><ul><li><p>Redis命令 <a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">Redis命令参考</a></p><ol><li><p>String</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set count 1;incr count;get count</span><br></pre></td></tr></table></figure></li><li><p>Hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset lisi name &quot;lisi&quot; age &quot;18&quot;;hget lisi age</span><br></pre></td></tr></table></figure></li><li><p>List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush mylist &quot;abc&quot;;lrange mylist 0 10;rpop mylist</span><br></pre></td></tr></table></figure></li><li><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd myset &quot;abc&quot;;smembers myset</span><br></pre></td></tr></table></figure></li><li><p>Zset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd myzset 1 &quot;abc&quot;;zrangebyscore myzset 0 10</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="key的查找与匹配"><a href="#key的查找与匹配" class="headerlink" title="key的查找与匹配"></a>key的查找与匹配</h3><ul><li><p>KEYS pattern：查找所有符合pattern模式的key</p><ul><li>该指令一次返回所有匹配的key，key数量过大会导致服务卡顿</li><li><code>keys *</code></li></ul></li><li><p>SCAN cursor [MATCH pattern] [COUNT count]：适用海量key的查询匹配</p><ul><li>基于游标的迭代器，以0作为开始一次迭代，直到命令返回游标0完成一次遍历，返回的数量不可控，多次返回可能会返回重复的key</li><li><code>scan 0 match li* count 10</code></li></ul></li></ul><h3 id="Redis数据持久化的3种方式"><a href="#Redis数据持久化的3种方式" class="headerlink" title="Redis数据持久化的3种方式"></a>Redis数据持久化的3种方式</h3><ol><li><p>RDB（快照）持久化：保存某个时间点的全量数据快照，存储于dump.rdb文件</p><blockquote><p>1）save：阻塞Redis服务进程，直到rdb文件被创建完成</p><p>2）bgsave：Fork出一个子进程来创建rdb文件，不会阻塞服务器进程</p></blockquote><ul><li>手动RDB持久化：使用<code>lastsave</code>和<code>bgsave</code>指令</li><li>自动RDB持久化：修改redis.conf配置文件中<code>save m n</code>参数定时触发，使用的是BGSAVE</li></ul><ol><li>优点：全量数据快照，文件小，恢复快</li><li>缺点：数据量大会严重影响性能，无法保存最近一次快照之后的数据</li></ol></li><li><p>AOF（Append-Only-File）持久化：保存写状态，存储于appendonly.aof日志文件</p><blockquote><p>以append的形式追加保存到AOF文件中（增量），记录除了查询外的所有变更数据库状态的指令</p></blockquote><ul><li><p>修改redis.conf配置文件<code>appendonly no</code>为<code>appendonly yes</code>使AOF持久化方式生效</p></li><li><p>配置AOF文件写入方式</p><table><thead><tr><th>选项</th><th>同步方式</th></tr></thead><tbody><tr><td>appendfsync always</td><td>每个写命令都及时同步</td></tr><tr><td>appendfsync everysec</td><td>默认方式，每秒同步一次</td></tr><tr><td>appendfsync no</td><td>交给操作系统决定</td></tr></tbody></table></li></ul><ol><li>优点：可读性高，适合保存增量数据，数据不易丢失</li><li>缺点：文件体积大，恢复时间长</li></ol></li><li><p>RDB-AOF混合持久化（Redis4.0之后推出）</p><blockquote><p>使用BGSAVE做镜像全量持久化，AOF做增量持久化</p></blockquote></li></ol><h3 id="Redis的使用场景"><a href="#Redis的使用场景" class="headerlink" title="Redis的使用场景"></a>Redis的使用场景</h3><ul><li><p>计数器、缓存、会话缓存、分布式锁、消息队列</p></li><li><p>Redis实现分布式锁</p><ol><li>SET key value [EX seconds] [PX milliseconds] [NX|XX]  <ul><li>EX seconds：设置键的过期时间为second秒；PX milliseconds：设置键的过期时间为milliseconds毫秒；NX：只要键不存在才对键进行设置操作；XX：只要键存在才对键进行设置操作；SET操作完成时，返回OK，否则返回nil</li><li><code>set name &quot;lisi&quot; ex 60 nx</code>说明：因为键存在，所以60秒之内不能修改value的值  </li><li>解决SETNX和EXPIRE实现分布式锁带来的风险问题</li></ul></li><li>使用SETNX和EXPIRE实现分布式锁<ul><li>SETNX  key  value：如果key不存在，则创建并赋值，若存在则设置失败；返回为1设置成功，返回0则设置失败，时间复杂度为O(1)</li><li>EXPIRE key seconds 设置key的生存时间，用于解决SETNX长期有效问题</li><li>风险：当只执行了SETNX程序就挂掉了，而EXPIRE未执行时，key就会被一直占用，后面独占资源逻辑的程序将不会执行，违背了Redis操作的原子性</li></ul></li></ol></li><li><p>Redis实现异步队列</p><ol><li><p>使用List作为队列，rpush生产消息，lpop消费消息</p><ul><li>缺点：没有等待队列里有值就直接消费</li><li>解决：通过应用层引入Sleep机制调用LPOP重试</li></ul></li><li><p>BLPOP key [key …] timeout：阻塞直到队列有消息或者超时</p><ul><li><code>blpop mylist 30</code></li><li>缺点：生产出的数据只能提供一个消费者消费</li></ul></li><li><p>pub/sub：主题订阅者模式，实现一对多的消费队列</p><ul><li>发送者(pub)发送消息，订阅者(sub)接收消息</li><li>Redis客户端（订阅者）可以订阅任意数量的频道</li><li>消息发布是无状态的，无法保证可达，可以使用kafka等消息队列解决</li><li>订阅消息<code>subscribe myTopic</code>，发布消息<code>publish myTopic &quot;hello&quot;</code></li></ul></li></ol></li><li><p>当Redis大量的key同时过期，清除耗时导致卡顿，可以给key设置过期时间加上随机值解决</p></li></ul><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><ul><li>Pipeline和 Linux管道类似</li><li>Redis是基于请求/响应模型，单个请求处理需要逐个应答，使用Pipeline可以批量执行指令，节省多次IO往返时间</li><li>对于有顺序依赖的指令建议分批发送</li></ul><h3 id="Redis的同步机制"><a href="#Redis的同步机制" class="headerlink" title="Redis的同步机制"></a>Redis的同步机制</h3><ul><li>全量同步过程<ul><li>Slave发送sync命令到Master</li><li>Master启动一个后台进程，将Redis中的数据快照保存在文件中</li><li>Master将保存数据快照期间接收的命令缓存起来</li><li>Master完成写文件操作后，将该文件发送给Slave</li><li>Master使用新的AOF文件替换掉旧的AOF文件</li><li>Master将这期间收集的增量写命令发送到Slave端</li></ul></li><li>增量同步过程<ul><li>Master接收用户的操作指令，判断是否需要发送到Slave</li><li>将操作记录追加到AOF文件</li><li>将操作传播到其它Slave：1.对齐主从库；2.往响应缓存写入指令</li><li>将缓存中的数据发送给Slave</li></ul></li><li>Redis  Sentinel（哨兵）：解决主从同步Master宕机后的主从切换问题<ul><li>监控：检查主从服务器是否运行正常</li><li>提醒：通过API向管理员或其它应用程序发送故障通知</li><li>自动故障迁移：主从切换</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【通用】常用正则表达式</title>
      <link href="/2020/07/03/common/regex/"/>
      <url>/2020/07/03/common/regex/</url>
      
        <content type="html"><![CDATA[<h3 id="常用正则匹配"><a href="#常用正则匹配" class="headerlink" title="常用正则匹配"></a>常用正则匹配</h3><h4 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^1[3|4|5|6|7|8|9]\d&#123;9&#125;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="QQ号"><a href="#QQ号" class="headerlink" title="QQ号"></a>QQ号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^[1-9][0-9]&#123;4,10&#125;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="身份证号，1代15位，2代18位"><a href="#身份证号，1代15位，2代18位" class="headerlink" title="身份证号，1代15位，2代18位"></a>身份证号，1代15位，2代18位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;(^\d&#123;8&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;$)|(^\d&#123;6&#125;(18|19|20)\d&#123;2&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;(\d|X|x)$)&#x2F;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X"><a href="#二代身份证号-18位数字-最后一位是校验位-可能为数字或字符X" class="headerlink" title="二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X"></a>二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^\d&#123;6&#125;(18|19|20)\d&#123;2&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;(\d|X|x)$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="中国邮政编码"><a href="#中国邮政编码" class="headerlink" title="中国邮政编码"></a>中国邮政编码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\d&#123;4&#125;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="16进制颜色-FFFFFF"><a href="#16进制颜色-FFFFFF" class="headerlink" title="16进制颜色(#FFFFFF)"></a>16进制颜色(#FFFFFF)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="IPv4-127-0-0-1"><a href="#IPv4-127-0-0-1" class="headerlink" title="IPv4(127.0.0.1)"></a>IPv4(127.0.0.1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])(?:\.(?:\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5]))&#123;3&#125;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="国内座机号"><a href="#国内座机号" class="headerlink" title="国内座机号"></a>国内座机号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;&#x2F;</span><br></pre></td></tr></table></figure><h4 id="日期-1970-01-01-1970-1-1"><a href="#日期-1970-01-01-1970-1-1" class="headerlink" title="日期(1970-01-01,1970-1-1)"></a>日期(1970-01-01,1970-1-1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^\d&#123;4&#125;(-)(1[0-2]|0?\d)\1([0-2]\d|\d|30|31)$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="24小时制时间（HH-mm-ss）"><a href="#24小时制时间（HH-mm-ss）" class="headerlink" title="24小时制时间（HH:mm:ss）"></a>24小时制时间（HH:mm:ss）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="12小时制时间（hh-mm-ss）"><a href="#12小时制时间（hh-mm-ss）" class="headerlink" title="12小时制时间（hh:mm:ss）"></a>12小时制时间（hh:mm:ss）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:1[0-2]|0?[1-9]):[0-5]\d:[0-5]\d$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="视频链接地址"><a href="#视频链接地址" class="headerlink" title="视频链接地址"></a>视频链接地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^https?:\&#x2F;\&#x2F;.*?(?:swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4)$&#x2F;i</span><br></pre></td></tr></table></figure><h4 id="图片链接地址"><a href="#图片链接地址" class="headerlink" title="图片链接地址"></a>图片链接地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^https?:\&#x2F;\&#x2F;.*?(?:gif|png|jpg|jpeg|webp|svg|psd|bmp|tif)$&#x2F;i</span><br></pre></td></tr></table></figure><h4 id="统一社会信用代码"><a href="#统一社会信用代码" class="headerlink" title="统一社会信用代码"></a>统一社会信用代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="迅雷链接"><a href="#迅雷链接" class="headerlink" title="迅雷链接"></a>迅雷链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^thunderx?:\&#x2F;\&#x2F;[a-zA-Z\d]+&#x3D;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="ed2k链接"><a href="#ed2k链接" class="headerlink" title="ed2k链接"></a>ed2k链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^ed2k:\&#x2F;\&#x2F;\|file\|.+\|\&#x2F;$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="磁力链接"><a href="#磁力链接" class="headerlink" title="磁力链接"></a>磁力链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^magnet:\?xt&#x3D;urn:btih:[0-9a-fA-F]&#123;40,&#125;.*$&#x2F;</span><br></pre></td></tr></table></figure><h4 id="带端口号的网址-或ip"><a href="#带端口号的网址-或ip" class="headerlink" title="带端口号的网址(或ip)"></a>带端口号的网址(或ip)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(((ht|f)tps?):\&#x2F;\&#x2F;)?[\w\-]+(\.[\w\-]+)+:\d&#123;0,5&#125;\&#x2F;?&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】花里胡哨的Linux命令</title>
      <link href="/2020/07/03/linux/garish/"/>
      <url>/2020/07/03/linux/garish/</url>
      
        <content type="html"><![CDATA[<h3 id="sl-跑火车"><a href="#sl-跑火车" class="headerlink" title="sl (跑火车)"></a>sl (跑火车)</h3><blockquote><p>环境参数：CentOS</p></blockquote><ol><li><p>下载 Epel-Release</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装 epel-release-6-8.noarch.rpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装安装sl命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y sl</span><br></pre></td></tr></table></figure></li><li><p>运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl</span><br></pre></td></tr></table></figure><a id="more"></a></li></ol><blockquote><p>环境参数：MacOS</p></blockquote><ol><li>安装sl<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install sl</span><br></pre></td></tr></table></figure></li></ol><h3 id="cowsay-样式"><a href="#cowsay-样式" class="headerlink" title="cowsay 样式"></a>cowsay 样式</h3><blockquote><p>环境参数：CentOS</p></blockquote><ol><li><p>安装cowsay</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cowsay -y</span><br></pre></td></tr></table></figure></li><li><p>查看所有样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay -l</span><br></pre></td></tr></table></figure></li><li><p>使用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cowsay -f default &quot;test&quot;</span><br><span class="line">cowsay -f tux &quot;hello&quot; &#96;whoami&#96;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>环境参数：MacOS</p></blockquote><ol><li>安装cowsay<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cowsay</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
